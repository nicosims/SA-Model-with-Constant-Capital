library(data.table)
library(compiler)
library(shiny)



updateProgress <- function(x1) {
  progress$set(value = x1, detail = "")}

pdIncome<-function(x)
{
  freqt<-as.matrix(table((x)))
  numlist<-matrix(1:length(x))
  freqt1<-sort(unique(c(x,1:max(x))))
  freqt1<-cbind(freqt1,0)
  freqt1[(freqt1[,1]%in%x), 2]<-freqt
  freqt1[,2]<-(sum(freqt1[,2])-cumsum(freqt1[,2]))/sum(freqt1[,2])
  freqt1
}


taxclearing<-function()
{
  a<-mcreated
  b<-sum(agent["Cash",])
  c<-((a*cRate)-(b-a))/b 
  agent["Cash",]<<-round(agent["Cash",]*(1+c))
  agent["Cash",(agent["Cash",]<0)]<<-0
  taxsurplus[,ti]<<-(sum(agent["Cash",])-a)

}



##create list of agents for the order of their actions
agentList<-function()
{
  ##creates list of agent ids for their turns to act
  aglist[1,]<<-c(sample(1:n, n, replace = FALSE))
  
}

budgetf<-function()
{
  ##get budgets
  mcreated<<-sum(agent["Cash",])
  agent["Budget",]<<-agent["inc_exp",]+agent["Cash",]
  
  

}


pickEmp<-function()
{
  eagents<-(agent["Employ_ind",]<= 0) & !(agent["id",] %in% aglist[,am:(am+batchRate)])&((agent["Budget",])>0)&!(agent["id",] %in%agent["Employ_ind",aglist[,am:(am+batchRate)]])
  
  H<-matrix(nrow = 2, 
            ncol = length(agent["id", eagents]));
  H[1,]<-agent["id", eagents];
  mw1<-mean(agent["wage_level",])*(agent["N_employees",])
  empWages<-mw1[eagents]
  H[2,]<-(agent["Budget", eagents])-empWages
  H[2,(H[2,]<0)]<-0
  ##creates list of not employed agents, potential employers
  H[1,]<-H[1,order(H[2,])];
  H[2,]<-sort(H[2,]);
  Hprob<-(H[2,]/sum(H[2,]));
  #creates weighted probabilities by wealth
  #, prob = Hprob
  E1<<-c(sample( H[1,], (batchRate+1), prob = Hprob, replace = FALSE))
  #E1<<-E1[order(agent["Budget",E1], decreasing = TRUE )]; 
  
  ##selects random employer
}
pEmp<-cmpfun(pickEmp)


jobMarket<-function()
{
  
  #wsample<-agent["inc_exp",aglist[,am:(am+batchRate)]];
  #E1<<-E1[order(agent["inc_exp",aglist[,am:(am+batchRate)]], decreasing = TRUE)] 
if ((sum(ConsumptionP[2,])/(n))>1)
{
  realD<-(sum(ConsumptionP[2,])/(n))
}
  else
  {
    realD<-1
  }
  
  ConsumptionP1<-ceiling( realD*(sum(ConsumptionP[1,] )/sum(ConsumptionP[2,])))
  cBudget<-(agent["Budget",E1])
  wageoffers<-(cBudget*(cBudget<ConsumptionP1))+(ConsumptionP1*!(cBudget<ConsumptionP1))
  
  wageoffersR<-sample(0:100, length(E1), replace = TRUE)/100
  wageoffers<-ceiling(wageoffers*wageoffersR)

  #*(agent["N_employees",E1]+1)
  #1+ (CperWR/10)*
  #(wageoffers>(wsample))
  E1a<-(wageoffers>agent["wage_level",aglist[,am:(am+batchRate)]])&(agent["Employ_ind",aglist[,am:(am+batchRate)]]!=-1)
  Ea<-E1[E1a]
  Ab<-aglist[,am:(am+batchRate)]

  if (any(E1a)) {  
    
    Aa<-Ab[E1a]
    ##if offer is greater than or equal to the agent's current wage level, accept job offer AND offer plus
    ##the capital intensity limit is less than the potential employer's cash reservers employee gets hired
    
    EID<-agent["Employ_ind",(Aa)];
    
    agent["Employ_ind",(Aa)]<<-Ea;
    #adds employer's id to employees Employer index
    agent["wage_level", (Aa)]<<-wageoffers[E1a]
    #expUpdate<-sample(1:(ConsumptionP1/2), length(Aa), replace = TRUE)

    agent["inc_exp",Aa]<<-wageoffers[E1a];
    ##wage expectation is increased by average price of a unit of consumption good

    Eb<-Ea[agent["Employ_ind", Ea]==(-1)];
    
    
        ##set employee wage level
    
    #agent["Budget",(Ea)]<<-agent["Budget",(Ea)]-wsample[E1a];
    ##reducers employer's budget by wage amount
      
    if (length(Eb)>0)
    {
      
      ##if agent's new employer was already a capitalist, add an employee to their firm
      agent["N_employees", Eb]<<- agent["N_employees", Eb]+1;
   
    }
    
    Eb<-Ea[agent["Employ_ind", Ea]==(0)]

    if (length(Eb)>0)
    { ##if agent's new employer was formerly unemployed, categorize them as an employer with one employee
      ##AND set their industry
      FirmbM[,ti]<<- FirmbM[,ti]+length(Eb); 
      agent["Employ_ind", Eb]<<-(-1);
      agent["N_employees", Eb]<<-1;
   
      Eb<-Eb[agent["industry", Eb]==0]
      if (length(Eb)>0)
      {
        agent["industry", Eb]<<-sample(1:2,replace = TRUE, length(Eb));
        
      }
      
    }

    EID<-EID[EID!=0]
    if(length(EID)>0)
    {
      EID1<-apply(matrix(EID), 2, table)
      EID<-sort(unique(EID))
      ##if agent was employed and is switching jobs, decrease their old employer's employees by one

      agent["N_employees",EID]<<-agent["N_employees",EID]-EID1;

    }
    
    
    
    
  }
  #& (agent["Employ_ind", a[,am:(am+batchRate)]]==0)
  E1a<-(E1a==FALSE)& (agent["Employ_ind", aglist[,am:(am+batchRate)]]==0)
  Aa<-Ab[E1a]
  if (any(E1a))
  { 
    ##if agent isn't hired and is currently unemployed, decrease wage expectations by the price of a consumption unit
    #expUpdate<-sample(1:(ConsumptionP1/2), length(Aa), replace = TRUE)
    #agent["inc_exp",Aa]<<-round(agent["inc_exp",Aa]-expUpdate);
    #agent["inc_exp",(agent["inc_exp",]<1)]<<-1;
    if (any(is.na(agent["inc_exp",Aa])))
    {
      print("2j")
      stop()
    }
    
  }
}

jMarket<-cmpfun(jobMarket)

##create consumption function for consumer goods

ConsumFunct<-function()
{
  agentNot<-aglist[,am:(am+batchRate)]
  conagent<-sample(agent["id",(agent["Budget",]>0 & ((agent["id",]%in% agentNot)==FALSE))], (batchRate+1))
  EmployerL<-conagent[agent["Employ_ind",conagent]<0]
  OtherL<-conagent[agent["Employ_ind",conagent]>-1]
  
  if (length(EmployerL)>0)
  {
    EX1<- round( (sample( (1:crate), length(EmployerL))/100)*agent["Budget",EmployerL]);

    CexpendM[,ti]<<-CexpendM[,ti]+sum(EX1);
    agent["Budget",EmployerL]<<-agent["Budget",EmployerL]-EX1;
    principal["ShortTerm",EmployerL]<<-principal["ShortTerm",EmployerL]+EX1;
    agent["nConsum",EmployerL]<<-agent["nConsum",EmployerL]+EX1;
  }
  if (length(OtherL)>0)
  {
    EX1<- round( (sample( (1:100), length(OtherL))/100)*agent["Budget",OtherL]);

    CexpendM[,ti]<<-CexpendM[,ti]+sum(EX1);
    agent["Budget",OtherL]<<-agent["Budget",OtherL]-EX1;
    principal["ShortTerm",OtherL]<<-principal["ShortTerm",OtherL]+EX1;
    agent["nConsum",OtherL]<<-agent["nConsum",OtherL]+EX1;
    ##agent expends money for consumption, putting it in total consumption pool
  }
  
  
}
ConsFun<-cmpfun(ConsumFunct)




##production of all goods
prodFunction<-function()
{
  agentW<-aglist[,am:(am+batchRate)]
  agentW<-agentW[agent["Employ_ind",agentW]!=0]
  agentWid<-((agent["Employ_ind",agentW]==-1)*agent["id",agentW])+(agent["Employ_ind",agentW]!=-1)*agent["Employ_ind",agentW]
  agentW<-agentW[agent["N_employees",agentWid]>0]
  agentWid<-agentWid[agent["N_employees",agentWid]>0]
  
  if (length(agentW)>0)
  {
    ##human labor can create 1-3 units, with the assumption that laborers can produce, 
    #without augmentation, only enough surplus to cover 2 other households
    #constant capital increases the stochastic limit of that surplus directly
    #distance formula sqrt((x2-x1)^2+(y1-y1)^2)
    #prodLimit<-round(agent["ConCapital",  agentWid]/agent["N_employees",  agentWid])+surplusVar
    
    #get wages for workers and dummy variable for capitalists
    agentWage<-(agent["wage_level",agentW]*(agent["Employ_ind",agentW]>0))

    ##convert to estimated real consumption
    agentWage<-agentWage*(sum(ConsumptionP[1,])/sum(ConsumptionP[2,]))
    agentWage<- agentWage+((agent["Employ_ind",agentW]<0)*(sum(ConsumptionP[2,])/sample(1:n, length(agentW))) )
 
    ##get constant capital per worker
    agentCon<-round(agent["ConCapital",  agentWid]/(agent["N_employees",  agentWid]+1) )
    realRatio<-agentCon/(agentCon+agentWage)
    prodLimit<-(1-abs(idealRatio1-realRatio)*(agent["industry",  agentWid]==1))+(1-abs(idealRatio2-realRatio)*(agent["industry",  agentWid]==2))
    prodLimit<-round(prodLimit*agentCon)+surplusVar

    #prodLimit<-surplusVar
    wProd1<-sample(1:100, replace = TRUE, length(agentWid))/100
    wProd1<-ceiling(prodLimit*wProd1)
    wProd2<-wProd1*sciTech
    agent["production", agentWid]<<-agent["production", agentWid]+wProd2
    
  } 
}
ProdFun<-cmpfun(prodFunction)

marketClean<-function()
{
  if (sum(agent["investment",])>0)
  {
    agent["Budget",]<-agent["Budget",]+agent["investment",]
    principal["ShortTerm",]<-principal["ShortTerm",]-agent["investment",]
    agent["investment",]<-0
  }
  if (sum(agent["nConsum",])>0)
  {
    agent["Budget",]<-agent["Budget",]+agent["nConsum",]
    principal["ShortTerm",]<-principal["ShortTerm",]-agent["nConsum",]
    agent["nConsum",]<-0
  }
  agent["production",]<-0
}

marketClose<-function()
{
  if(any(((am:(am+batchRate))/mCloseRate)==round((am:(am+batchRate))/mCloseRate)))
  { 
    if(any((((agent["industry",]==1)*1)*agent["production",])>0))
    {
      ##employers get their money based off how much they produce out of total and total latent demand
      c<-((agent["industry",]==1)*1)*agent["production",]
      a<-(round(sum(agent["nConsum",]) * (c/sum(c))))
      agent["Cash",]<<-agent["Cash",]+a
      agent["Revenue",]<<-agent["Revenue",]+a
      b<-sample(agent["id",agent["production",]>0], 1)
      
      
      agent["Cash",b]<<-agent["Cash",b]-(sum(a)-sum(agent["nConsum",]))
      agent["Revenue",b]<<-agent["Revenue",b]-(sum(a)-sum(agent["nConsum",]))
      
      
      ##consumers get real goods which they've already spent money on
      a<-(round(sum(c) * (agent["nConsum",]/sum(agent["nConsum",]))))
      agent["rConsum",]<<-agent["rConsum",]+a
      b<-sample(agent["id",agent["nConsum",]>0], 1)
      agent["rConsum",b]<<-agent["rConsum",b]-(sum(a)-sum(c))
      
      ##update average price for consumption goods
      ConsumptionP[1,2]<<-ConsumptionP[1,2]+sum(agent["nConsum",])
      ConsumptionP[2,2]<<-ConsumptionP[2,2]+sum(c)
      ##move nconsm and production data to historical data before deleting from current agent array
      anData["production",]<<-anData["production",]+c
      anData["nConsum",]<<-anData["nConsum",]+agent["nConsum",]
      agent["nConsum",]<<-0
      agent["production",(agent["industry",]==1)]<<-0
    }
    if (any(agent["investment",]>0)&any((((agent["industry",]==2)*1)*agent["production",])>0))
    {
      
      ##employers get their money based off how much they produce out of total and total latent demand
      c<-((agent["industry",]==2)*1)*agent["production",]
      a<-(round(sum(agent["investment",]) * (c/sum(c))))
      agent["Cash",]<<-agent["Cash",]+a
      agent["Revenue",]<<-agent["Revenue",]+a
      b<-sample(agent["id",agent["production",]>0], 1)
      agent["Cash",b]<<-agent["Cash",b]-(sum(a)-sum(agent["investment",]))
      agent["Revenue",b]<<-agent["Revenue",b]-(sum(a)-sum(agent["investment",]))
      
      
      ##consumers get real goods which they've already spent money on
      a<-(round(sum(c) * (agent["investment",]/sum(agent["investment",]))))
      d1<-agent["id",a>0]
      trip<-FALSE
      if((length(d1)>1)&(sum(a)-sum(c))!=0)
      {
        
        for (bTick in 1:abs(-(sum(a)-sum(c)) ))
        {
          if(sum(agent["id",a>0 ])!=1)
          {
          b<-sample(agent["id",a>0 ], 1)
          if (-(sum(a)-sum(c))<0)
          {
            a[b]<-a[b]-1
          }
          else
          {
            a[b]<-a[b]+1
          }
          }
          else
          {
            if (trip==FALSE)
            {
            a[b]<-a[b]+(-(sum(a)-sum(c))/abs(-(sum(a)-sum(c)) ))*(abs(-(sum(a)-sum(c)) )-bTick)
            trip<-TRUE
            }
            }
            

          }

        
        if(any(a[b]<0))
        {
          print(a[b])

          stop()
        }
      }
      
      agent["ConCapital",]<<-agent["ConCapital",]+a
      
      
      
      ##set depreciation schedules
      
      #depreciation1<-colSums(depreciation)
      dep1<-(floor(a/d))
      dep1<-is.finite(dep1)*dep1

      dep1<-matrix(data = dep1, nrow = d, ncol = n, byrow = TRUE)
      depreciation<<-depreciation+dep1
      
      dep1<-(a-colSums(dep1))
      depTemp<-agent["id",dep1>0]
      dep1<-dep1[dep1>0]
      depTick<-1
      for (depR in dep1)
      {

          depreciation[1:depR,depTemp[depTick]]<<-depreciation[1:depR,depTemp[depTick]]+1
          

        depTick<-depTick+1
      }

      
      ##update average price for consumption goods
      CapitalP[1,2]<<-CapitalP[1,2]+sum(agent["investment",])
      CapitalP[2,2]<<-CapitalP[2,2]+sum(c)
      
      ##move nconsum and production data to historical data before deleting from current agent array
      anData["production",]<<-anData["production",]+c
      anData["investment",]<<-anData["investment",]+agent["investment",]
      agent["investment",]<<-0
      agent["production",(agent["industry",]==2)]<<-0
    }
    
    
  }
}
mCloseFun<-cmpfun(marketClose)
#reset industries for defunct firms at end of year AND archive annual data
fReset<-function()
{   
  aRest<-(agent["industry",]>0)&(agent["Employ_ind",]!=(-1))
  agent["industry",aRest]<<-0
  agAnData[,,ti]<<-anData
  anData<<-anData*0
  
}
anDataFun<-function()
{
  
  anData<<-anData+agent[anDatarows,] 
  agent[c("debt_pay", "wIncome", "nConsum", "rConsum", "production", "investment", "depreciation", "VarCapital", "Revenue"),]<<-0
  ConsumPAn[1 , ti]<<-sum(ConsumptionP[1,])
  ConsumPAn[2 , ti]<<-sum(ConsumptionP[2,])
  agAnCapStock[,ti]<<-colSums(depreciation)
  ConsumptionP[,1]<<-ConsumptionP[,2]
  ConsumptionP[,2]<<-0
  CapitalPAn[1 , ti]<<-sum(CapitalP[1,])
  CapitalPAn[2 , ti]<<-sum(CapitalP[2,])
  CapitalP[,1]<<-CapitalP[,2]
  CapitalP[,2]<<-0
}

depreciationFun<-function()
{
  ##move depreciation into agent accounts, decrease constant capital by depreciation levels

  agent["ConCapital",]<<-agent["ConCapital",]-depreciation[1,]
  agent["depreciation",]<<-depreciation[1,]
  depreciation[1:(nrow(depreciation)-1),]<<-depreciation[2:(nrow(depreciation)),]
  depreciation[(nrow(depreciation)),]<<-0
}

debtPayFun<-function()
{ 
  
  

  ##pay short term debt
  debtPayS<-agent["Cash",]-principal["ShortTerm",]
  principal["ShortTerm",]<<-(-debtPayS*(debtPayS<=0))
  #print(principal["ShortTerm",])
  agent["Cash",]<<-debtPayS*(debtPayS>=0)
  
  ##pay long term debt
  debtPayL<-agent["Cash",]-round(principal["LongTerm",]/md)
  principal["LongTerm",]<<-(principal["LongTerm",]-round(principal["LongTerm",]/md)-(debtPayL*(debtPayL<=0)))
  agent["Cash",]<<-debtPayL*(debtPayL>=0)
  
  ##transfer unpaid short term debt to long term debt
  principal["LongTerm",]<<-principal["LongTerm",]+principal["ShortTerm",]
  
  ##check for insolvency
  insolvent<-(principal["LongTerm",]*intrate)>agent["inc_exp",]

}
debtPFun<-cmpfun(debtPayFun)

payroll<-function()
{
  ##check for employer agents
  agentE<-aglist[,am:(am+batchRate)]
  agentE<-agentE[agent["Employ_ind",agentE]==-1]
  if(length(agentE)>0)
  {
    
    for (e in agentE)
    {
      
      ##create list of employees
      vcRatio<-sample(1:CperWR, 1)/10
      Wa<-matrix(nrow = 3, ncol = length(agent["id",agent["Employ_ind",]==(e)]));
      Wa[1,]<-agent["id",agent["Employ_ind",]==(e)];
      Wa[2,]<-agent["wage_level",agent["Employ_ind",]==(e)];
      ##make sure workers are only getting paid once this production cycle
      Wa[2,(agent["wIncome",Wa[1,]]>0)]<-0
      Wa[3,]<-round(Wa[2,]*(1+vcRatio))
      ##randomize list, withhold wages for certain percent of workforce
      Wran<-sample(1:round(length(Wa[1,])), round(length(Wa[1,])), replace = FALSE);
      W<-matrix(nrow = 3, ncol = length(Wran))
      W[1,]<-Wa[1, Wran];
      W[2,]<-Wa[2, Wran];
      W[3,]<-Wa[3, Wran];
      #pay employees
      paid<-(cumsum(W[3,])<agent["Budget",(e)]);
      agent["Budget",(e)] <<- agent["Budget",(e)]-sum(W[3,paid]);
      principal["ShortTerm",e]<<-principal["ShortTerm",e]+-sum(W[3,paid]);
      agent["Cash", W[1,paid]]<<-agent["Cash", W[1,paid]]+W[2,paid];
      agent["wIncome",W[1,paid]]<<-agent["wIncome",W[1,paid]]+W[2,paid];
      agent["VarCapital",e]<<-agent["VarCapital",e]+sum(W[2,paid]);
      
      
      ##mark down investment made
      invAm<-sum(round(W[2,paid]*vcRatio))
      agent["investment",e]<<-agent["investment",e]+invAm;

      
      
      
      
      
      ##those workers who can't be paid are laid off
      paid<-paid==FALSE;
      agent["Employ_ind",W[1,paid]]<<-0;
      agent["wage_level",W[1,paid]]<<-0;
      agent["N_employees",e]<<-agent["N_employees",e]-sum(paid);

      
      ##check for firm failure
      if (agent["N_employees",e]==0)
      {
        agent["Employ_ind", e]<<-0;
        ##transfer constant capital stock to production account for sale
        agent["production", e]<<-agent["production", e]+agent["ConCapital",e];
        anData["ConCapital",e]<<-anData["ConCapital",e]+agent["ConCapital",e]
        agent["ConCapital",e]<<-0;
        agent["inc_exp",e]<<-ceiling(agent["inc_exp",e]*(crate/100));
        #agent["inc_exp",(agent["inc_exp",]<1)]<<-1;
        depreciation[,e]<<-0;
        FirmdM[,ti]<<-FirmdM[,ti]+1;
        ##employer becomes unemployed, capital accounts are zeroed out
      }
    }
  }
}
payrollFun<-cmpfun(payroll)
##accrue interest, only occurs after all agents have gone
intaddFun<-function()
{
  principal["LongTerm",]<<-round(principal["LongTerm",]*(1+(intrate/12)))
}

##quitting function for when employees have enough money to consider starting thier own business
quitFun<-function()
{
  if ((sum(ConsumptionP[2,])/(n*expShare))>1)
  {
    realD<-(sum(ConsumptionP[2,])/(n*expShare))
  }
  else
  {
    realD<-1
  }
  ConsumptionP1<-ceiling( realD*(sum(ConsumptionP[1,] )/sum(ConsumptionP[2,])))
  agentQ<-aglist[,am:(am+batchRate)]
  Qtf<-agent["Budget",agentQ]>agent["wage_level",agentQ]+ConsumptionP1*2
  Qtf<-(Qtf*(sample(1:2, length(Qtf), replace = TRUE)-1))==1
  agentQ<-agentQ[Qtf]
  if (length(agentQ)>0)
  {
    for (agQ in agentQ)
    {
    agent["inc_exp",agentQ]<-agent["inc_exp",agentQ]+ConsumptionP1
    }
  }

}
idealFun<-function()
{
  idealRatio1<-sample(1:100,1)/100
  idealRatio2<-sample(1:100,1)/100
  }

##function for scaling, run at end of year, after annual data is stored 
scalingFun<-function()
{
  mScale1<-floor((sum(agent["Budget",])/(n*m1))/10)
  if (mScale1>0)
  {
    agent["Budget",]<<-round(agent["Budget",]/(mScale1*10))
    agent["inc_exp",]<<-round(agent["inc_exp",]/(mScale1*10))
    agent["Cash",]<<-round(agent["Cash",]/(mScale1*10))
    agent["wage_level",]<<-round(agent["wage_level",]/(mScale1*10))
    CapitalP[1,]<<-round(CapitalP[1,]/(mScale1*10))
    ConsumptionP[1,]<<-round(ConsumptionP[1,]/(mScale1*10))
    principal<<-round(principal/(mScale1*10))
    mScale[,ti]<<-mScale[,ti]+mScale1
  }
  cScale1<-floor((sum(agent["ConCapital",])/(n*m1))/10)
  if (cScale1>0)
  {
    agent["ConCapital",]<<-round(agent["ConCapital",]/(cScale1*10))
    CapitalP[2,]<<-round(CapitalP[2,]/(cScale1*10))
    ConsumptionP[2,]<<-round(ConsumptionP[2,]/(cScale1*10))
    depreciation<<-round(depreciation/(cScale1*10))
    cScale[,ti]<<-cScale[,ti]+cScale1
    
  }
}
scalFun<-cmpfun(scalingFun)

agentSetpFun<-function()
{
  while (am<=n)
  {
    
    if (am+batchRate>n) {
      batchRate<<-n-am
    } else {
      batchRate<<-batchRate1
    }
    pEmp()
    jMarket()
    ConsFun()
    ProdFun()
    payrollFun()
    mCloseFun()
    am<<-am+1+batchRate
    
  }
}
aStepFun<-cmpfun(agentSetpFun)



simFun1<-function()
{
  while (ti<=(timsim))
  {
    am<<-1
    agentList()
    budgetf()
    aStepFun()
    marketClean()
    debtPFun()
    intaddFun()
    depreciationFun()
    anDataFun()
    fReset()
    idealFun()
    taxclearing()
    scalFun()
    ti<<-ti+1
    if (is.function(updateProgress)) {
    updateProgress((ti/timsim))
    }
  }
}
simFun<-cmpfun(simFun1)

agentSetpFun2<-function()
{
  while (am<=n)
  {
    
    if (am+batchRate>n) {
      batchRate<<-n-am
    } else {
      batchRate<<-batchRate1
    }
    pEmp()
    if( any(is.na(agent)))
    {
      stop("1")
    }
    jMarket()
    if( any(is.na(agent)))
    {
      stop("2")
    }
    ConsFun()
    if( any(is.na(agent)))
    {
      stop("3")
    }
    ProdFun()
    if( any(is.na(agent)))
    {
      stop("4")
    }
    payrollFun()
    if( any(is.na(agent)))
    {
      stop("5")
    }
    mCloseFun()
    if( any(is.na(agent)))
    {
      stop("6")
    }
    am<<-am+1+batchRate
    
  }
}
aStepFun2<-cmpfun(agentSetpFun2)

##these functions for debugging
simFun2<-function()
{
  while (ti<=(timsim))
  {
    am<<-1
    agentList()
    budgetf()
    aStepFun2()
    if( any(is.na(agent)))
    {
      stop("7")
    }
    marketClean()
    if( any(is.na(agent)))
    {
      stop("8")
    }
    debtPFun()
    if( any(is.na(agent)))
    {
      stop("9")
    }
    intaddFun()
    if( any(is.na(agent)))
    {
      stop("10")
    }
    depreciationFun()
    if( any(is.na(agent)))
    {
      stop("11")
    }
    anDataFun()
    if( any(is.na(agent)))
    {
      stop("12")
    }
    fReset()
    if( any(is.na(agent)))
    {
      stop("13")
    }
    idealFun()
    taxclearing()
    scalFun()
    if( any(is.na(agent)))
    {
      stop("14")
    }
    ti<<-ti+1
  }
}
simFun2<-cmpfun(simFun2)

simulF<-function(n1, m11, t1, cashRate1, intrate1, caprate1, CperWR1, mw1, dep1, IDR1, IDR2)
{
  
  n<<-n1
  ##number of agents
  m1 <<- m11
  ##initial wealth
  timsim <<- t1
  ##simulation cycles
 
  ##list of main adjustable variables
  
  surplusVar<<-5

  cRate<<-cashRate1
  ##normal rate of cash growth
  
  intrate<<-intrate1
  #interest rate

  CperWR<<-CperWR1*100
  ##ratio of capital to worker limit
  
  d<<-dep1
  ##depreciation rate
  
  ##rate of capitalist consumption/saving 100 is no savings all available for consumption, 
  #0 all savings nothing available for consumption
  crate<<-caprate1*100
  
  mw <<- mw1
  ##starting wage expctation
  
  timsim<<-timsim*12
  ##conver time to months

  md<<-d*12
  ##monthly depreciation rate
  
  idealRatio1<<-IDR1
  idealRatio2<<-IDR2
  ##select first time iteration 
  
  surplusVar<<-5
  
  #expShare<<-10
  ##share of consumption used to adjust expectations
  
  batchRate1<<-10
  batchRate<<-10
  ##how many agents processed per action step
  
  mCloseRate<<-25
  #how many turns before the market closes and exchange actually occurs
  
  sciTech<<-1
  ##scientific-technological index value which determines how much production is possible with given techniques
  ##use to simulate productivity shocks, positive or negative
  
  #cdist<<-.6
  #Percent of population getting cash distributions
  
  
  ##list of insolvent agents
  insolvent<<-matrix(data = 0, ncol = n) 
  
  ConsumptionP<<-matrix(data = 0, nrow = 2, ncol = 2)
  ConsumptionP[1,1]<<-2500
  ConsumptionP[2,1]<<-100
  ##average price of consumption goods
  ConsumPAn<<-matrix(data = 0, ncol = (timsim), nrow = 2)
  
  
  CapitalP<<-matrix(data = 0, nrow = 2, ncol = 2)
  CapitalP[1,1]<<-2500
  CapitalP[2,1]<<-100
  ##average price of capital goods
  CapitalPAn<<-matrix(data = 0, ncol = (timsim), nrow = 2)
  
  ##money created
  mcreated<<-0
  taxsurplus<<-matrix(data = 0, ncol = timsim)

  
  ##scaling index for money
  mScale<<-matrix(data=0,ncol = timsim)
  cScale<<-matrix(data=0,ncol = timsim)
  
  agent <<- matrix(data=0, nrow = 18, ncol = n)
  rownames(agent)<<-c("Employ_ind","id", "industry", "debt_pay", "Budget", "wage_level","wIncome","nConsum", "rConsum","production","investment","depreciation", "ConCapital", "VarCapital", "Revenue","N_employees", "inc_exp", "Cash")
  ##agent has attributes money, employment index for workers, employment index for employers,
  ##wage level, and constant capital for agents that are employers, variable capital, revenue, number of employees for capitalists
  ##and wage expectations for labor market
  ##industry 1 = consumption goods, industry 2 = investment goods
  agent["id",]<<-1:n
  ##id set
  agent["Budget",]<<-mw
  ##initial wealth set
  agent["Cash",]<<-m1
  
  aglist<<-matrix(nrow = 1, ncol = n)
  #agent order list
  
  agent["inc_exp",]<<-mw
  ##sets original wage expectations for all agents
  
  
  anData <<- matrix(data=0, nrow = 16, ncol = n)
  rownames(anData)<<-c("Employ_ind","industry","debt_pay",  "wage_level","wIncome","nConsum", "rConsum","production", "investment","depreciation", "ConCapital", "VarCapital", "Revenue","N_employees", "inc_exp", "Cash")
  ##annualized agent data
  anDatarows<<-c("Employ_ind","industry","debt_pay",  "wage_level","wIncome","nConsum", "rConsum","production", "investment","depreciation", "ConCapital", "VarCapital", "Revenue","N_employees", "inc_exp", "Cash")
  
  
  ##create 3 - dimmensional array to store all annualized data
  agAnData<<- array( data=0, dim = c(16, n, (timsim)))
  rownames(agAnData)<<-c("Employ_ind","industry","debt_pay",  "wage_level","wIncome","nConsum", "rConsum","production", "investment","depreciation", "ConCapital", "VarCapital", "Revenue","N_employees", "inc_exp", "Cash")
  
  
  ##create depreciation schedule
  ##use cbind to add new schedules 
  ##remove columns in bankruptcy
  depreciation<<-matrix(data = 0, nrow = d, ncol = n)
  agAnCapStock<<-matrix(nrow = n, ncol = (timsim))
  
  ##create principal data matrix
  principal<<-matrix(data = 0, nrow = 2, ncol = n)
  rownames(principal)<<-c("ShortTerm","LongTerm")
  
  FirmbM<<-matrix(0, nrow = 1, ncol = timsim)
  ##matrix for firm birth
  FirmdM<<-matrix(0, nrow = 1, ncol = timsim)
  #matrix for firm death
  
  conexT<<-0
  ##Latent demand pool for consumption expenditures
  
  CexpendM<<-matrix(0, nrow=1, ncol = timsim)
  ##matrix for consumption expenditure pool of money
  
  FixexpendM<<-matrix(0, nrow = 1, ncol = timsim)
  ##matrix for fixed capital expenditure pool of money 
  
  ti<<-1
  
simFun()
simOutput<-list(agAnData, mScale, cScale, CapitalPAn, ConsumPAn, agAnCapStock)
simOutput
}


# Define UI
ui <- fluidPage(
  titlePanel("Material-Social Architecture Simulation"),
  
  sidebarLayout(
    sidebarPanel(
      HTML("<br></br><b><h4>Set starting values.</h4></b>"),
      numericInput("AgnNum", "Number of Agents (WARNING: HIGHER AGENT LEVELS DEMAND MUCH HIGHER COMPUTE):", value = 1000),
      numericInput("IntM", "Initial Cash to All Agents:", value = 100),
      numericInput("Time1", "Length of Simulation in Years:", value = 100),
      numericInput("dep11", "Length of Depreciation Schedule:", value = 10),
      numericInput("mw11", "Starting Wage Expectation:", value = 25),
      sliderInput(inputId = "CashGrate1",
                  label = "Rate of Cash Growth:",
                  min = -1,
                  max = 1,
                  value = .07,
                  step = .01),
      sliderInput(inputId = "intrate111",
                  label = "Interest Rate:",
                  min = 0,
                  max = 1,
                  value = .05,
                  step = .01),
      sliderInput(inputId = "IDR11",
                  label = "Ideal Production Function Ratio of labor/fixed capital for consumption good industry:",
                  min = 0,
                  max = 2,
                  value = .5,
                  step = .01),
      sliderInput(inputId = "IDR22",
                  label = "Ideal Production Function Ratio of labor/fixed capital for means of production good industry:",
                  min = 0,
                  max = 2,
                  value = .5,
                  step = .01),
      HTML("<br></br><b><h4>Choose max level of each variable. </h4></b>"),
      sliderInput(inputId = "MaxCapCon",
                  label = "Choose maximum rate of capitalist consumption, 1=all budget available for consumption:",
                  min = .2,
                  max = .8,
                  value = .5,
                  step = .1),
      sliderInput(inputId = "CperWR11",
                  label = "Maximum Ratio of Investment to Variable Capital (Wages):",
                  min = 0,
                  max = 2,
                  value = .1,
                  step = .01),
      checkboxInput(inputId = "startat10", label = "Start Graphs at 10th timestep", value = FALSE),

      downloadButton("download_data", "Download Agent Data"),
      downloadButton("download_data1", "Download Price & Scaling Data"),
      actionButton("submit_btn", "Submit"),
    ),
    
    mainPanel(
      uiOutput("panelout")

    )
  )
)

server <- function(input, output, session) {
observe({
  req(input$AgnNum,input$IntV, input$IntC, input$nTime)
  if (input$AgnNum < 100) {
    updateNumericInput(session, "AgnNum", value = 100)
  } else if (input$nTime > 100000) {
    updateNumericInput(session, "AgnNum", value = 100000)
  }
  if (input$IntM < 10) {
    updateNumericInput(session, "IntM", value = 10)
  } else if (input$IntM > 100000) {
    updateNumericInput(session, "IntM", value = 100000)
  }
  if (input$Time1 < 5) {
    updateNumericInput(session, "Time1", value = 5)
  } else if (input$Time1 > 100000) {
    updateNumericInput(session, "Time1", value = 100000)
  }
  if (input$dep11 < 1) {
    updateNumericInput(session, "dep11", value = 1)
  } else if (input$dep11 > 100) {
    updateNumericInput(session, "dep11", value = 100)
  }
  if (input$mw11 < 1) {
    updateNumericInput(session, "mw11", value = 1)
  } else if (input$mw11 > 1000) {
    updateNumericInput(session, "mw11", value = 1000)
  }
  
})
  observeEvent(input$submit_btn, {

    simulR<-(
      {    progress <<- shiny::Progress$new()
      progress$set(message = "Running Simulation", value = 0)
      # Close the progress when this reactive exits (even if there's an error)
      on.exit(progress$close())
      simulF(input$AgnNum,input$IntM, input$Time1, input$CashGrate1, input$intrate111, input$MaxCapCon, input$CperWR11, input$mw11, input$dep11, input$IDR11, input$IDR22)
      })
   
    priceandscale1<<-rbind(simulR[[2]], simulR[[3]], simulR[[4]], simulR[[5]])
    row.names(priceandscale1)<<-c("money scaler", "capital scaler", "capital monetary demand", "capital quantity", "consumer good monetary demand", "consumer good quantity")
    agdata1<<-simulR[[1]]
    # Download handler for the CSV file
    output$download_data <- downloadHandler(
      filename = function() {
        "simulation_data1.csv"
      }
      ,
      content = function(file) {
        write.csv(agdata1, file)
      }
    )
    output$download_data1 <- downloadHandler(
      filename = function() {
        "simulation_priceandscale.csv"
      },
      content = function(file) {
        write.csv(priceandscale1, file)
      }
    )
    
    tstart10<-10*input$startat10
  agdata1<<-agdata1[,,tstart10:timsim]
  priceandscale1<<-priceandscale1[,tstart10:timsim]
  agAnCapStock<<-agAnCapStock[,tstart10:timsim]
  endTime<<-timsim-tstart10
  employedPop<<-colSums(agdata1["Employ_ind",,]>0)/n
  employedPop1<<-colSums(agdata1["N_employees",,])/n
  employedPop<<-employedPop*100
  
  result1<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(employedPop, type="l", xlab = "time in months",ylab = "percent of total", main = "Employed Population")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  
  output$result1 <- renderPlot({
    result1()
  })
  capPop1<<-colSums(agdata1["Employ_ind",,]==-1)/n
  capPop1<<-capPop1*100
  unemployedPop<<-100-(capPop1+employedPop)
  unemployedPop<<-round((unemployedPop), digits = 2)
  
  result2<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(unemployedPop, type="l", xlab = "time",ylab = "percent of total", main = "Unemployed Population")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }  
  
  output$result2 <- renderPlot({
    result2()
  })
    
    result3<-function(){
          par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(capPop1, type="l", xlab = "time",ylab = "percent of total", main = "Capitalist Population")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
    }
  output$result3 <- renderPlot({
    result3()
  })
  
  
  mScaler<<-cumsum(priceandscale1["money scaler",])
  mScaler<<-c(0, mScaler[1:(length(mScaler)-1)])
  mScaler<<-(10^mScaler)
  
  cScaler<<-cumsum(priceandscale1["capital scaler",])
  cScaler<<-c(0, cScaler[1:(length(cScaler)-1)])
  cScaler<<-(10^cScaler)

  cappScaler<<-(priceandscale1["capital monetary demand",]*mScaler)/(priceandscale1["capital quantity",]*cScaler)
  conpScaler<<-(priceandscale1["consumer good monetary demand",]*mScaler)/(priceandscale1["consumer good quantity",]*cScaler)
  
  depPlot<<-colSums(agdata1["depreciation",,])
  depPlot<<-depPlot*cScaler*cappScaler
  
  varCapPlot<<-colSums(agdata1["VarCapital",,])*mScaler
  RevPlot<<-colSums(agdata1["Revenue",,])*mScaler
  investPlot<<-colSums(agdata1["investment",,])*mScaler
  investShare<<-(investPlot/(RevPlot))

  result4<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(investShare, type="l", xlab = "time",ylab = "", main = "Investment as Share of GDP")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result4 <- renderPlot({
    result4()
  })
  
  ProfitPlot<<-(RevPlot-(varCapPlot+depPlot))/(varCapPlot+depPlot)
  depshareR<<-depPlot/RevPlot

  result5<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(ProfitPlot, type="l", xlab = "time",ylab = "", main = "Economy Level Profit Rate")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result5 <- renderPlot({
    result5()
  })
  
  result6<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(depshareR, type="l", xlab = "time",ylab = "", main = "Depreciation as Share of Revenue")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result6 <- renderPlot({
    result6()
  })
  
  CapIntype2<<-depPlot/varCapPlot
  
  result7<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(CapIntype2, type="l", xlab = "time",ylab = "", main = "Capital Intensity")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result7 <- renderPlot({
    result7()
  })
  
  workInc<<-colSums(agdata1["wIncome",,])*mScaler
  capInc<<-colSums(agdata1["Revenue",,])*mScaler
  workShare<<-(workInc/(capInc))

  result8<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(workShare, type="l", xlab = "time",ylab = "", main = "Working Class Share of Income")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result8 <- renderPlot({
    result8()
  })
  
  result9<-function(){
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    hist(workShare[1:n],main = "Histogram of Working Class Income Share")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result9 <- renderPlot({
    result9()
  })

  depPlot1<<-colSums(agdata1["depreciation",,]*(agdata1["industry",,]==1))
  depPlot1<<-depPlot1*cappScaler*cScaler
  
  depPlot2<<-colSums(agdata1["depreciation",,]*(agdata1["industry",,]==2))
  depPlot2<<-depPlot2*cappScaler*cScaler
  
  VarCapPlot1<<-colSums(agdata1["VarCapital",,]*(agdata1["industry",,]==1))*mScaler
  
  VarCapPlot2<<-colSums(agdata1["VarCapital",,]*(agdata1["industry",,]==2))*mScaler
  
  Revplot1<<-colSums(agdata1["Revenue",,]*(agdata1["industry",,]==1))*mScaler
  
  Revplot2<<-colSums(agdata1["Revenue",,]*(agdata1["industry",,]==2))*mScaler
  
  Debtplot1<<-colSums(agdata1["debt_pay",,]*(agdata1["industry",,]==1))*mScaler
  Debtplot2<<-colSums(agdata1["debt_pay",,]*(agdata1["industry",,]==2))*mScaler

  CStock1<<-colSums(agAnCapStock*(agdata1["industry",,]==1))
  CStock1<<-CStock1*cappScaler*cScaler
  
  CStock2<<-colSums(agAnCapStock*(agdata1["industry",,]==2))
  CStock2<<-CStock2*cappScaler*cScaler
  
  
  ConCapplot1<<-colSums(agdata1["ConCapital",,]*(agdata1["industry",,]==1))
  ConCapplot1<<-ConCapplot1*cappScaler*cScaler
  
  ConCapplot2<<-colSums(agdata1["ConCapital",,]*(agdata1["industry",,]==2))
  ConCapplot2<<-ConCapplot2*cappScaler*cScaler
  
  
  Indudstry1Profit<<-(Revplot1-(depPlot1+VarCapPlot1))/(depPlot1+VarCapPlot1)
  Indudstry2Profit<<-(Revplot2-(depPlot2+VarCapPlot2))/(depPlot1+VarCapPlot2)
  
  result10<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(Indudstry1Profit[1:endTime], type = "l", main = "Industry Profit Rates", ylim = c(0,1), xlab = "Time", ylab = "Profit Rate")
    lines(Indudstry2Profit[1:endTime], col = "red")
    legend("topright", legend = c("Consumption Good Industry", "Means of Production Industry"), col = c("black", "red"), pch = 1)
        grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  
  output$result10 <- renderPlot({
    result10()
  })
 
 Industry1CapIn<<-CStock1/VarCapPlot1
 Industry2CapIn<<-CStock2/VarCapPlot2
 
 ProfitRel<<-c(Indudstry1Profit[1:endTime],Indudstry2Profit[1:endTime])
 CapInRel<<-c(Industry1CapIn[1:endTime], Industry2CapIn[1:endTime])
 
 result11<-function(){
      par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
   plot(Indudstry1Profit[1:endTime],Industry1CapIn[1:endTime] , col = "red", ylab = "Industry Capital Intensity", xlab = "Industry Profit", xlim = c(0,1))
   lines(Indudstry2Profit[1:endTime], Industry2CapIn[1:endTime], col = "blue", type = "p")
   abline(lm( Industry1CapIn[1:endTime] ~ Indudstry1Profit[1:endTime]), col = "red")
   abline(lm( Industry2CapIn[1:endTime] ~ Indudstry2Profit[1:endTime]), col = "blue")
   legend("topright", legend = c("Consumption Good Industry", "Means of Production Industry"), col = c("red", "blue"), pch = 1)
   grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
 }
  output$result11 <- renderPlot({
    result11()
 })
  
  result23<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(c(Indudstry1Profit[1:endTime], Indudstry2Profit[1:endTime]),c(Industry1CapIn[1:endTime], Industry2CapIn[1:endTime]) , ylab = "Industry Capital Intensity", xlab = "Industry Profit", ylim = c(min(CapInRel), max(CapInRel)), xlim = c(min(ProfitRel), max(ProfitRel)))
    abline(lm( c(Industry1CapIn[1:endTime], Industry2CapIn[1:endTime]) ~ c(Indudstry1Profit[1:endTime], Indudstry2Profit[1:endTime])), col = "red")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  output$result23 <- renderPlot({
    result23()
  })
  CStockC<<-(agAnCapStock[1:endTime])*cappScaler[1:endTime]*cScaler[1:endTime]
  depCon<<-agdata1["depreciation",,1:endTime]*cappScaler[1:endTime]*cScaler[1:endTime]
  capCon<<-agdata1["ConCapital",,1:endTime]*cappScaler[1:endTime]*cScaler[1:endTime]
  proRateDis<<-(agdata1["Revenue",,1:endTime]*mScaler[1:endTime]-(agdata1["VarCapital",,1:endTime]*mScaler[1:endTime]+depCon))/(agdata1["VarCapital",,1:endTime]*mScaler[1:endTime]+CStockC)
  capIn<<-CStockC/(agdata1["VarCapital",,1:endTime]*mScaler[1:endTime])
  capIn<<-capIn[!is.nan(proRateDis)]
  proRateDis<<-proRateDis[!is.nan(proRateDis)]
  capIn<<-capIn[!is.infinite(proRateDis)]
  proRateDis<<-proRateDis[!is.infinite(proRateDis)]
  proRateDis<<-proRateDis[!is.nan(capIn)]
  capIn<<-capIn[!is.nan(capIn)]
  proRateDis<<-proRateDis[!is.infinite(capIn)]
  capIn<<-capIn[!is.infinite(capIn)]
  
  result12<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    hist(proRateDis, freq = TRUE, breaks = 10000, xlim = c(-1, 5), xlab = "Profit Rate", main = "Histogram of Profit Rates")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
  
  output$result12 <- renderPlot({
    result12()
  })

  ##income distribution graphs
  ##select which year to inspect income distribution
  yr<<-endTime
  depIncome<<-agdata1["depreciation",,yr]*cappScaler[yr]*cScaler[yr]
  depIncome<<-round(depIncome/mScaler[yr])
  RevIncome<<-(agdata1["Revenue",,yr]-agdata1["VarCapital",,yr])
  pincome<<-RevIncome-depIncome
  
  
  totalinc<<-pincome+agdata1["wIncome",,yr]
  totalinc<<-totalinc[totalinc>0]
  pincome<<-pincome[pincome>0]
  winc<<-agdata1["wIncome",,yr]
  winc<<-winc[winc>0]
  
  cashtotal<<-agdata1["Cash",,yr]
  cashtotal<<-cashtotal[cashtotal>0]
  
  totalincPD<<-pdIncome(totalinc)
  
  result13<-function(){
      par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
    plot(totalincPD, log = "xy", main = "Total Income Distribution")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)  
  }
  
  output$result13 <- renderPlot({
    result13()
  })
  
  
  wincPD<<-pdIncome(winc)
  
  result14<-function(){
        par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
   plot(wincPD, log = "xy", main = "Worker Income Distribution")
    grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
  }
 output$result14 <- renderPlot({
   result14()
  })
 
 
 capincPD<<-pdIncome(pincome[pincome>0])
 
 result15<-function(){
      par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
   plot(capincPD, log = "xy", main = "Capitalist Income Distribution")
   grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
 }
 
 output$result15 <- renderPlot({
   result15()
 })

 result16<-function(){
     par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  plot(capincPD, log = "xy", main = "Capitalist vs Worker Income Distribution", ylab = "Probability", xlab = "Income")
  lines(wincPD, col = "blue")
  legend("bottomleft", legend = c("Capitalist", "Worker"), col = c("black", "blue"), pch = 1)
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
 }

output$result16 <- renderPlot({
  result16()
})

cashPD<<-pdIncome(cashtotal)

result17<-function()
{
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  plot(cashPD, log = "xy", main = "Cash Distribution", xlim = c(100, max((cashPD))))
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result17 <- renderPlot({
  result17()
})

result18<-function(){
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  hist(c(pincome,winc),breaks = 1000, main = "Histogram of Agent Income Levels", xlab = "Worker Income + Profit")
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result18 <- renderPlot({
  result18()
})

capIn<<-capIn[order(proRateDis)]
proRateDis<<-proRateDis[order(proRateDis)] 

dfPC<<-data.frame(proRateDis[order(capIn)], capIn[order(capIn)])

pricesI1<<-(colSums(agdata1["Revenue",,]*(agdata1["industry",,]==1))/colSums(agdata1["production",,]*(agdata1["industry",,]==1)))
employeesI1<<-colSums(agdata1["N_employees",,]*(agdata1["industry",,]==1))/colSums(agdata1["production",,]*(agdata1["industry",,]==1)) 


pricesI2<<-(colSums(agdata1["Revenue",,]*(agdata1["industry",,]==2))/colSums(agdata1["production",,]*(agdata1["industry",,]==2)))
employeesI2<<-colSums(agdata1["N_employees",,]*(agdata1["industry",,]==2))/colSums(agdata1["production",,]*(agdata1["industry",,]==2)) 
#industry prices per good vs industry number of employeees per good

result19<-function(){
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  plot(pricesI1, employeesI1, col = "red", ylab = "Employees per Good", xlab = "Unit Prices")
  lines(pricesI2,employeesI2, type = "p", col ="blue" )
  legend("topright", legend = c("Consumption Good Industry", "Means of Production Industry"), col = c("red", "blue"), pch = 1)
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result19 <- renderPlot({
  result19()
})

result20<-function()
{
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  ##plot level of cash in the economy
  plot(colSums(agdata1["Cash",,])*mScaler, log = "y", main = "Level of Cash in the Economy", ylab = "Cash", xlab = "Time")
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result20 <- renderPlot({
  result20()
})
result21<-function()
{
  par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  ##plot level of output in the economy
  plot(colSums(agdata1["production",,])*cScaler, log = "y", main = "Level of Economic Output", ylab = "Output", xlab = "Time")
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result21 <- renderPlot({
  result21()
})
#Profit Equations check:
##nominal consumption + nominal investment should equal total revenue (capInc)  
##statistical discrepancy caused by rounding when dividing money to produces 
#according to their output brought to market
nConsumPlot<<-colSums(agdata1["nConsum",,])*mScaler

result22<-function(){
    par(font.main = 2, font.lab = 2, font.axis = 2, cex = 1.2)
  ##plot level of output in the economy
  plot((((nConsumPlot+investPlot)-capInc)/capInc), main = "Statistical Discrepencay", ylab = "")
  grid(nx= NA , ny=NULL, col = "gray", lty = "dotted", equilogs = FALSE)
}
output$result22 <- renderPlot({
  result22()
})



# Define a download handler
output$downloadPlot1 <- downloadHandler(
  filename = function() {
    "downloaded_plot1.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result1())
    dev.off()
  }
)
output$downloadPlot2 <- downloadHandler(
  filename = function() {
    "downloaded_plot2.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result2())
    dev.off()
  }
)
output$downloadPlot3 <- downloadHandler(
  filename = function() {
    "downloaded_plot3.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result3())
    dev.off()
  }
)
output$downloadPlot4 <- downloadHandler(
  filename = function() {
    "downloaded_plot4.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result4())
    dev.off()
  }
)
output$downloadPlot5 <- downloadHandler(
  filename = function() {
    "downloaded_plot5.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result5())
    dev.off()
  }
)
output$downloadPlot6 <- downloadHandler(
  filename = function() {
    "downloaded_plot6.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result6())
    dev.off()
  }
)
output$downloadPlot7 <- downloadHandler(
  filename = function() {
    "downloaded_plot7.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result7())
    dev.off()
  }
)
output$downloadPlot8 <- downloadHandler(
  filename = function() {
    "downloaded_plot8.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result8())
    dev.off()
  }
)
output$downloadPlot9 <- downloadHandler(
  filename = function() {
    "downloaded_plot9.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result9())
    dev.off()
  }
)
output$downloadPlot10 <- downloadHandler(
  filename = function() {
    "downloaded_plot10.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result10())
    dev.off()
  }
)
output$downloadPlot11 <- downloadHandler(
  filename = function() {
    "downloaded_plot11.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result11())
    dev.off()
  }
)
output$downloadPlot12 <- downloadHandler(
  filename = function() {
    "downloaded_plot12.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result12())
    dev.off()
  }
)
output$downloadPlot13 <- downloadHandler(
  filename = function() {
    "downloaded_plot13.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result13())
    dev.off()
  }
)
output$downloadPlot14 <- downloadHandler(
  filename = function() {
    "downloaded_plot14.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result14())
    dev.off()
  }
)
output$downloadPlot15 <- downloadHandler(
  filename = function() {
    "downloaded_plot15.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result15())
    dev.off()
  }
)
output$downloadPlot16 <- downloadHandler(
  filename = function() {
    "downloaded_plot16.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result16())
    dev.off()
  }
)
output$downloadPlot17 <- downloadHandler(
  filename = function() {
    "downloaded_plot17.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result17())
    dev.off()
  }
)
output$downloadPlot18 <- downloadHandler(
  filename = function() {
    "downloaded_plot18.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result18())
    dev.off()
  }
)
output$downloadPlot19 <- downloadHandler(
  filename = function() {
    "downloaded_plot19.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result19())
    dev.off()
  }
)
output$downloadPlot20 <- downloadHandler(
  filename = function() {
    "downloaded_plot20.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result20())
    dev.off()
  }
)
output$downloadPlot21 <- downloadHandler(
  filename = function() {
    "downloaded_plot21.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(  result21())
    dev.off()
  }
)
output$downloadPlot22 <- downloadHandler(
  filename = function() {
    "downloaded_plot22.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result22())
    dev.off()
  }
)
output$downloadPlot23 <- downloadHandler(
  filename = function() {
    "downloaded_plot23.png" # Name of the downloaded file (e.g., PNG format)
  },
  content = function(file) {
    # Save the plot to the download file
    png(file)
    print(result23())
    dev.off()
  }
)

output$panelout<-renderUI({ if (ti>timsim)
{ tagList(plotOutput("result1"),
  downloadButton("downloadPlot1", "Download Plot"),
  
  plotOutput("result2"),
  downloadButton("downloadPlot2", "Download Plot"),
  plotOutput("result3"),      
  downloadButton("downloadPlot3", "Download Plot"),
  plotOutput("result4"),
  downloadButton("downloadPlot4", "Download Plot"),
  
  plotOutput("result5"),
  downloadButton("downloadPlot5", "Download Plot"),
  
  plotOutput("result6"),      
  downloadButton("downloadPlot6", "Download Plot"),
  
  plotOutput("result7"),
  downloadButton("downloadPlot7", "Download Plot"),
  
  plotOutput("result8"),
  downloadButton("downloadPlot8", "Download Plot"),
  
  plotOutput("result9"),
  downloadButton("downloadPlot9", "Download Plot"),
  
  plotOutput("result10"),
  downloadButton("downloadPlot10", "Download Plot"),
  
  plotOutput("result11"),      
  downloadButton("downloadPlot11", "Download Plot"),
  
  plotOutput("result23"),
  downloadButton("downloadPlot23", "Download Plot"),
  
  plotOutput("result12"),
  downloadButton("downloadPlot12", "Download Plot"),
  
  plotOutput("result13"),
  downloadButton("downloadPlot13", "Download Plot"),
  
  plotOutput("result14"),
  downloadButton("downloadPlot14", "Download Plot"),
  
  plotOutput("result15"),
  downloadButton("downloadPlot15", "Download Plot"),
  
  plotOutput("result16"),
  downloadButton("downloadPlot16", "Download Plot"),
  
  plotOutput("result17"),
  downloadButton("downloadPlot17", "Download Plot"),
  
  plotOutput("result18"),
  downloadButton("downloadPlot18", "Download Plot"),
  
  plotOutput("result19"),
  downloadButton("downloadPlot19", "Download Plot"),
  
  plotOutput("result20"),
  downloadButton("downloadPlot20", "Download Plot"),
  
  plotOutput("result21"),
  downloadButton("downloadPlot21", "Download Plot"),
  
  plotOutput("result22"),
  downloadButton("downloadPlot22", "Download Plot"),
  )
  }
  else
  { NULL }
}
)

  }
   )
}
shinyApp(ui = ui, server = server)

